// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Music {
  id        Int    @id @default(autoincrement())
  name      String
  projectId Int
  url       String

  results   Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model Exam {
  id        Int    @id @default(autoincrement())
  name      String
  projectId Int
  words     String
  // [ "word1", "word2", "word3" ]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id])
  results   Result[]
}

model Result {
  id        Int @id @default(autoincrement())
  projectId Int
  musicId   Int
  subjectId Int
  examId    Int
  score     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id])
  exam    Exam    @relation(fields: [examId], references: [id])
  music   Music   @relation(fields: [musicId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Subject {
  id           Int     @id @default(autoincrement())
  studentId    Int
  name         String?
  projectId    Int
  musicIdOrder String
  // [ 1, 2, 3, 4 ]
  examIdOrder  String
  // [ 1, 2, 3, 4 ]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project  @relation(fields: [projectId], references: [id])
  result  Result[]
}

model Project {
  id        Int       @id @default(autoincrement())
  accessId  String    @unique
  // 6 digit code
  ready     Boolean   @default(false)
  enabled   Boolean
  name      String
  subjects  Subject[]
  exams     Exam[]
  musics    Music[]
  results   Result[]

  testItems Int @default(6)
  readingTime Int @default(30)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  createdBy   User    @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
